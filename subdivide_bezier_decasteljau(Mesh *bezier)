// subdivide bezier spline into line segments (assume bezier has only bezier segments and no lines)
// subdivide using de casteljau algorithm
void subdivide_bezier_decasteljau(Mesh *bezier) {
    auto pos = bezier->pos;
    auto splines = bezier->spline;
    
    //put_your_code_here("Implement de Casteljau algorithm");
    
    // *note*: this psuedocode is for an iterative implementation of the algorithm without adaptive subd
    for (int i=0; i<level; i++){// foreach level
        // make new arrays of positions and bezier segments
        // copy all the vertices into the new array (this waste space but it is easier for now)
        vector<vec4i> seg;
        vector<vec3f> pos(bezier->pos);



        // foreach bezier segment
        for (int j = 0; j < bezier->spline.size(); j++){
            auto s = bezier->spline.at(j);
            // apply subdivision algorithm
            auto p0 = bezier->pos.at(s.x);
            auto p1 = bezier->pos.at(s.y);
            auto p2 = bezier->pos.at(s.z);
            auto p3 = bezier->pos.at(s.w);
            // prepare indices for two new segments
            for (int k = 0; k < 7; k++){
                pos.push_back(zero3f);
            }
            // add mid point
            auto q0 = (p0 + p1)/2.0;
            auto q1 = (p1 + p2)/2.0;
            auto q2 = (p2 + p3)/2.0;
            auto r0 = (q0 + q1)/2.0;
            auto r1 = (q1 + q2)/2.0;
            // add points for first segment and fix segment indices
            pos.at(0 + j * 7) = p0;
            pos.at(1 + j * 7) = q0;
            pos.at(2 + j * 7) = r0;
            pos.at(3 + j * 7) = s0;
            // add points for second segment and fix segment indices
            pos.at(4 + j * 7) = r1;
            pos.at(5 + j * 7) = q2;
            pos.at(6 + j * 7) = p3;
            // add indices for both segments into new segments array
            auto newSeg1 = vec4i(0+j*7, 1+j*7, 2+j*7, 3+j*7);
            auto newSeg2 = vec4i(3+j*7, 4+j*7, 5+j*7, 6+j*7);
            seg.push_back(newSeg1);
            seg.push_back(newSeg2);
        }
        // set new arrays pos, segments into the working lineset
        bezier->pos.clear();
        copy(pos.begin(), pos.end(), back_inserter(bezier->pos));
        bezier->spline.clear();
        copy(seg.begin(), seg.end(), back_inserter(bezier->spline));
    }
